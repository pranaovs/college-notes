[
  {
    "algorithm": "Palindrome Check",
    "input": [
      "n: The integer to check."
    ],
    "output": [
      "result: A boolean value indicating true if $n$ is a palindrome, false otherwise."
    ],
    "steps": [
      {
        "step": "Initialize `reversed_number = 0`."
      },
      {
        "step": "Create a temporary copy `temp = n`."
      },
      {
        "step": "Initialize `remainder`."
      },
      {
        "step": "While `temp > 0`:",
        "substeps": [
          {
            "step": "Get the last digit: `remainder = temp \\pmod {10}`."
          },
          {
            "step": "Build the reversed number: `reversed_number = reversed_number * 10 + remainder`."
          },
          {
            "step": "Remove the last digit from temp: `temp = temp / 10` (integer division)."
          }
        ]
      },
      {
        "step": "Set `result = (n == reversed_number)`."
      }
    ]
  },
  {
    "algorithm": "Armstrong Number Check",
    "input": [
      "n: The integer to check."
    ],
    "output": [
      "result: A boolean value indicating true if $n$ is an Armstrong number, false otherwise."
    ],
    "steps": [
      {
        "step": "Initialize `sum_of_powers = 0`."
      },
      {
        "step": "Initialize `number_of_digits = 0`."
      },
      {
        "step": "Create a temporary copy `temp1 = n`."
      },
      {
        "step": "Count the number of digits in $n$ (using the logic from `digitCount`):",
        "substeps": [
            {
                "step": "While `temp1 > 0`:",
                 "substeps": [
                    {
                        "step": "Increment `number_of_digits`."
                    },
                    {
                        "step": "`temp1 = temp1 / 10` (integer division)."
                    }
                 ]
            }
        ]
      },
      {
        "step": "Create another temporary copy `temp2 = n`."
      },
      {
        "step": "Initialize `remainder`."
      },
      {
        "step": "While `temp2 > 0`:",
        "substeps": [
          {
            "step": "Get the last digit: `remainder = temp2 \\pmod {10}`."
          },
          {
            "step": "Add the digit raised to the power of `number_of_digits` to the sum: `sum_of_powers = sum_of_powers + pow(remainder, number_of_digits)`."
          },
          {
            "step": "Remove the last digit from temp2: `temp2 = temp2 / 10` (integer division)."
          }
        ]
      },
      {
        "step": "Set `result = (n == sum_of_powers)`."
      }
    ]
  },
  {
    "algorithm": "Perfect Number Check",
    "input": [
      "n: The positive integer to check."
    ],
    "output": [
      "result: A boolean value indicating true if $n$ is a perfect number, false otherwise."
    ],
    "steps": [
      {
        "step": "Initialize `sum_of_divisors = 0`."
      },
      {
        "step": "Iterate with index $i$ from $1$ up to (but not including) $n$:",
        "substeps": [
          {
            "step": "If $n$ is perfectly divisible by $i$ (i.e., $n \\pmod i == 0$):",
            "substeps": [
              {
                "step": "Add $i$ to the sum: `sum_of_divisors = sum_of_divisors + i`."
              }
            ]
          }
        ]
      },
      {
        "step": "Set `result = (n == sum_of_divisors)`."
      }
    ]
  }
]
