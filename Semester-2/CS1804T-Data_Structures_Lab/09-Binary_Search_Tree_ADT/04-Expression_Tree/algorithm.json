[
  {
    "algorithm": "Expression Tree Construction from Postfix",
    "input": [
      "postfix - A string representing the postfix expression, with tokens (operands and operators) potentially separated by spaces."
    ],
    "output": [
      "The `root` member of the ExpressionTree object points to the root of the constructed tree."
    ],
    "steps": [
      {
        "step": "Initialize an empty stack `st` that stores pointers to `Node` objects."
      },
      {
        "step": "Iterate through the `postfix` string character by character using index `i`." ,
        "substeps": [
            {
                "step": "Skip space characters."
            },
             {
                "step": "Extract the next token (operand or operator) from the string.",
                 "substeps": [
                    {
                        "step": "If the character `postfix[i]` is a digit:",
                        "substeps": [
                           {
                               "step": "Read consecutive digits (and potentially a decimal point) to form the complete numeric operand `token`."
                           },
                           {
                               "step": "Adjust index `i` to point to the last character of the extracted number."
                           }
                        ]
                    },
                    {
                        "step": "Else (if it's not a digit, assume it's a single-character operator):",
                        "substeps": [
                           {
                                "step": "Set `token` to the single character `postfix[i]`."
                           }
                        ]
                    }
                 ]
            },
             {
                "step": "Create a new `Node` called `temp`."
            },
             {
                "step": "Set `temp->data = token`."
            },
            {
                "step": "Set `temp->left = nullptr` and `temp->right = nullptr`."
            },
             {
                "step": "Check if the `token` is an operator using `isOperator(token)`." ,
                "substeps": [
                    {
                        "step": "If `token` is NOT an operator (it's an operand):",
                        "substeps": [
                            {
                                "step": "Push `temp` onto the stack `st`."
                            }
                        ]
                    },
                    {
                        "step": "If `token` IS an operator:",
                         "substeps": [
                             {
                                 "step": "Pop the top node from `st` and assign it to `t1` (this will be the right child)."
                             },
                             {
                                 "step": "Pop the next node from `st` and assign it to `t2` (this will be the left child)."
                             },
                             {
                                 "step": "Set `temp->right = t1`."
                             },
                             {
                                 "step": "Set `temp->left = t2`."
                             },
                             {
                                 "step": "Push the operator node `temp` back onto the stack `st`."
                             }
                         ]
                    }
                ]
            }
        ]
      },
       {
        "step": "After iterating through the entire `postfix` string, the stack `st` should contain exactly one node."
      },
      {
        "step": "Pop the final node from `st` and assign it to the tree's `root`."
      }
    ]
  },
   {
    "algorithm": "Recursive Preorder Traversal (Expression Tree)",
    "input": [
      "current - Pointer to the current node being visited."
    ],
    "output": [
      "Prints the data of nodes in Preorder (Root-Left-Right) sequence to standard output."
    ],
    "steps": [
      {
        "step": "If `current` is not `nullptr`:",
        "substeps": [
          {
            "step": "Visit/Process the current node (Print `current->data`)."
          },
          {
            "step": "Recursively call `preorder` on the left child: `preorder(current->left)`."
          },
          {
            "step": "Recursively call `preorder` on the right child: `preorder(current->right)`."
          }
        ]
      }
    ]
  },
   {
    "algorithm": "Recursive Inorder Traversal (Expression Tree with Parentheses)",
    "input": [
      "current - Pointer to the current node being visited."
    ],
    "output": [
      "Prints the data of nodes in Inorder (Left-Root-Right) sequence, adding parentheses around subexpressions rooted at operators, to standard output."
    ],
    "steps": [
      {
        "step": "If `current` is not `nullptr`:",
        "substeps": [
          {
            "step": "If `current->data` is an operator (check using `isOperator`):",
             "substeps": [
                {
                     "step": "Print an opening parenthesis '('."
                }
             ]
          },
          {
            "step": "Recursively call `inorder` on the left child: `inorder(current->left)`."
          },
          {
            "step": "Visit/Process the current node (Print `current->data`)."
          },
          {
            "step": "Recursively call `inorder` on the right child: `inorder(current->right)`."
          },
           {
            "step": "If `current->data` is an operator (check using `isOperator`):",
            "substeps": [
                {
                    "step": "Print a closing parenthesis ')'."
                }
            ]
          }
        ]
      }
    ]
  },
  {
    "algorithm": "Recursive Postorder Traversal (Expression Tree)",
    "input": [
      "current - Pointer to the current node being visited."
    ],
    "output": [
      "Prints the data of nodes in Postorder (Left-Right-Root) sequence to standard output."
    ],
    "steps": [
      {
        "step": "If `current` is not `nullptr`:",
        "substeps": [
          {
            "step": "Recursively call `postorder` on the left child: `postorder(current->left)`."
          },
          {
            "step": "Recursively call `postorder` on the right child: `postorder(current->right)`."
          },
          {
            "step": "Visit/Process the current node (Print `current->data`)."
          }
        ]
      }
    ]
  }
]
