[
  {
    "algorithm": "Hash Table Insert with Quadratic Probing",
    "input": [
      "key - The integer value to insert."
    ],
    "output": [
      "Prints a message indicating success (with index) or failure (table full)."
    ],
    "steps": [
      {
        "step": "Calculate initial index: $index = key \\pmod{SIZE}$."
      },
      {
        "step": "Store start index: $startIndex = index$."
      },
      {
        "step": "Initialize probe counter: $i = 1$."
      },
      {
        "step": "Check if `table[index]` is not occupied."
      },
      {
        "step": "OR Check if `table[index]` is marked deleted."
      },
      {
        "step": "If either condition in steps 4 or 5 is true:",
        "substeps": [
          {
            "step": "Set `table[index].data = key`."
          },
          {
            "step": "Set `table[index].isOccupied = true`."
          },
          {
            "step": "Set `table[index].isDeleted = false`."
          },
          {
            "step": "Print success message with `index`."
          },
          {
            "step": "Return."
          }
        ]
      },
      {
        "step": "Start quadratic probing loop (do-while)."
      },
      {
        "step": "Calculate next probe index: $index = (startIndex + i \\times i) \\pmod{SIZE}$."
      },
      {
        "step": "Check if $index == startIndex$ (wrap-around)."
      },
      {
        "step": "If wrap-around occurred:",
         "substeps": [
            {
                "step": "Print 'Table is full'."
            },
             {
                "step": "Return."
            }
         ]
      },
      {
        "step": "Increment probe counter: $i = i + 1$."
      },
      {
        "step": "Loop condition: while `table[index]` is occupied AND `table[index]` is not deleted."
      },
      {
        "step": "Loop finished: Found an available slot at `index`."
      },
      {
        "step": "Set `table[index].data = key`."
      },
      {
        "step": "Set `table[index].isOccupied = true`."
      },
      {
        "step": "Set `table[index].isDeleted = false`."
      },
      {
        "step": "Print success message with `index`."
      }
    ]
  },
  {
    "algorithm": "Hash Table Remove (Lazy Deletion) with Quadratic Probing",
    "input": [
      "key - The integer value to remove."
    ],
    "output": [
      "Prints a message indicating success (with index) or failure (not found)."
    ],
    "steps": [
      {
        "step": "Calculate initial index: $index = key \\pmod{SIZE}$."
      },
      {
        "step": "Store start index: $startIndex = index$."
      },
      {
        "step": "Initialize probe counter: $i = 1$."
      },
      {
        "step": "Start probing loop (while)."
      },
      {
          "step": "Check if `table[index].data == key`."
      },
      {
          "step": "AND Check if `table[index].isOccupied == true`."
      },
      {
          "step": "AND Check if `table[index].isDeleted == false`."
      },
      {
          "step": "If all conditions in steps 5-7 are true:",
          "substeps": [
              {
                 "step": "Set `table[index].isOccupied = false`."
              },
              {
                  "step": "Set `table[index].isDeleted = true`."
              },
              {
                  "step": "Print removal success message with `index`."
              },
              {
                  "step": "Return."
              }
          ]
      },
      {
          "step": "If the key was not found at the current `index`:"
      },
      {
          "step": "Calculate next probe index: $index = (startIndex + i \\times i) \\pmod{SIZE}$."
      },
      {
          "step": "Check if $index == startIndex$ (wrap-around)."
      },
      {
          "step": "If wrap-around occurred:",
          "substeps": [
            {
                 "step": "Break the loop (key not found)."
            }
          ]
      },
      {
          "step": "Increment probe counter: $i = i + 1$."
      },
      {
          "step": "Loop condition: while `table[index].isOccupied == true` (continues probing past occupied/deleted slots)."
      },
      {
          "step": "If loop finishes without returning, print 'Element not found'."
      }
    ]
  },
  {
    "algorithm": "Hash Table Search with Quadratic Probing",
    "input": [
      "key - The integer value to search for."
    ],
    "output": [
      "Prints a message indicating found (with index) or not found."
    ],
    "steps": [
       {
        "step": "Calculate initial index: $index = key \\pmod{SIZE}$."
      },
      {
        "step": "Store start index: $startIndex = index$."
      },
      {
        "step": "Initialize probe counter: $i = 1$."
      },
       {
        "step": "Start probing loop (while)."
      },
      {
          "step": "Check if `table[index].data == key`."
      },
      {
          "step": "AND Check if `table[index].isOccupied == true`."
      },
      {
          "step": "AND Check if `table[index].isDeleted == false`."
      },
       {
          "step": "If all conditions in steps 5-7 are true:",
          "substeps": [
            {
               "step": "Print found message with `index`."
            },
            {
                "step": "Return."
            }
          ]
       },
        {
          "step": "If the key was not found at the current `index`:"
      },
      {
        "step": "Calculate next probe index: $index = (startIndex + i \\times i) \\pmod{SIZE}$."
      },
       {
          "step": "Check if $index == startIndex$ (wrap-around)."
      },
      {
          "step": "If wrap-around occurred:",
          "substeps": [
            {
                 "step": "Break the loop (key not found)."
            }
          ]
      },
       {
          "step": "Increment probe counter: $i = i + 1$."
      },
       {
          "step": "Loop condition: while `table[index].isOccupied == true` (continues probing past occupied/deleted slots)."
      },
       {
          "step": "If loop finishes without returning, print 'Element not found'."
      }
    ]
  }
]
