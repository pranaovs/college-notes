[
  {
    "algorithm": "Stack Push (via AList::insertend)",
    "input": [
      "element - The character to push onto the stack"
    ],
    "output": [
      "None (Stack is modified in place)"
    ],
    "steps": [
      {
        "step": "Increase storage: Call internal resize(+1) function on the underlying array list." ,
        "substeps": [
            {
                "step": "Reallocate memory for the internal array (`ptr`) to hold `count + 1` elements."
            },
            {
                "step": "Increment the element count (`count`) by 1."
            },
            {
                "step": "Update the internal size variable (`size`) to the new `count`."
            }
        ]
      },
      {
        "step": "Store element: Assign the input `element` to the new end of the resized array (at index `count - 1`, which was the old `count` before resizing)."
      }
    ]
  },
  {
    "algorithm": "Stack Pop (via AList::deleteend)",
    "input": [
      "None"
    ],
    "output": [
      "element - The character popped from the top of the stack"
    ],
    "steps": [
      {
        "step": "Check for underflow: If the stack is empty (`count == 0`), throw an 'Invalid position' exception."
      },
      {
        "step": "Get element: Retrieve the last element from the array (`ptr[count - 1]`) and store it in a temporary variable `ele`."
      },
      {
        "step": "Decrease storage: Call internal resize(-1) function on the underlying array list.",
        "substeps": [
            {
                "step": "Reallocate memory for the internal array (`ptr`) to hold `count - 1` elements."
            },
            {
                "step": "Decrement the element count (`count`) by 1."
            },
            {
                "step": "Update the internal size variable (`size`) to the new `count`."
            }
        ]
      },
      {
        "step": "Return the retrieved `element` (`ele`)."
      }
    ]
  }
]
